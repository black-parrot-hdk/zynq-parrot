#############################
# Makefile functions
#############################
# Saves initial values so that we can filter them later
VARS_OLD := $(.VARIABLES)

define bsg_fn_upper
$(shell echo $(1) | tr a-z A-Z)
endef
define bsg_fn_lower
$(shell echo $(1) | tr A-Z a-z)
endef
bsg_var_blank :=
define bsg_var_newline

$(bsg_var_blank)
endef

bsg_var_percent := %

define bsg_fn_patch_if_new
	$(eval apply_stage_patch := git apply --ignore-whitespace --ignore-space-change)
	$(eval apply_commit_patch := git am --ignore-whitespace --ignore-space-change)
	$(eval check_patch := $(apply_stage_patch) --check --reverse)
	$(eval src_root := $(1))
	$(eval patch_root := $(2))
	$(eval patch_list := $(wildcard $(patch_root)/*.patch))
	$(eval patch_is_top := $(findstring patches,$(lastword $(subst /, ,$(dir $(patch_root))))))
	for p in $(patch_list); \
	do \
		echo "Checking if patch $$p is applicable"; \
		cd $(src_root); $(check_patch) $$p && continue; \
		echo "Patch is unapplied..."; \
		if [ ! -z "$$patch_is_top" ]; then \
		echo "Applying patch to sub-directory $(src_root);" \
		cd $(src_root); $(apply_commit_patch) $$p; \
		echo "Patch applied!"; \
		else \
		echo "Applying patch to top-level $(src_root);" \
		cd $(src_root); $(apply_stage_patch) $$p; \
		echo "Patch applied!"; \
		fi \
	done
endef

define bsg_fn_build_if_new
	$(eval name := $(1))
	$(eval src_dir := $(2))
	$(eval touch_dir := $(3))
	$(eval hash := $$(shell cd $(src_dir); git rev-parse HEAD))
	$(eval tag := $(addprefix $(touch_dir)/$(name)., $(hash)))
	$(eval internal_target := $(src_dir)/.$(name)_build)
	$(eval external_target := build.$(name))
	$(eval rebuild_target := rebuild.$(name))
$(external_target): | $(tag)
$(rebuild_target):
	rm -f $(touch_dir)/$(name).*
	+$(MAKE) $(tag)
$(tag):
	+$(MAKE) $(internal_target)
	touch $(tag)
endef

define bsg_fn_info
	$(eval $@_msg = $(1))
	$(eval $@_prefix = "BSG-INFO: ")
	echo "${$@_prefix} ${$@_msg}";
endef

define bsg_fn_warn
	$(eval $@_msg = $(1))
	$(eval $@_prefix = "BSG-WARN: ")
	echo "${$@_prefix} ${$@_msg}";
endef

define bsg_fn_error
	$(eval $@_msg = $(1))
	$(eval $@_prefix = "BSG-ERROR: ")
	echo "${$@_prefix} ${$@_msg}"; \
	exit -1;
endef

# Global Makefile settings
SHELL := /bin/bash
MAKEFLAGS += --warn-undefined-variables

# Global help target
.DEFAULT_GOAL: help
.PHONY: help
help: ## prints this message
	  @egrep -h '\s##\s' $(MAKEFILE_LIST) | sort \
		  | awk 'BEGIN {FS = ":.*?## "}; {printf "\033[36m  %-30s\033[0m %s\n", $$1, $$2}'

# Global reset
.PHONY: bleach_all
bleach_all: ## wipes the whole repo clean. Use with caution
	@cd $(ZP_DIR); git clean -ffdx; git submodule deinit -f .
	
#############################
# Paths
#############################
ZP_DIR         ?= $(TOP)
ZP_IMPORT_DIR  ?= $(ZP_DIR)/import
ZP_INSTALL_DIR ?= $(ZP_DIR)/install
ZP_BIN_DIR     ?= $(ZP_INSTALL_DIR)/bin
ZP_LIB_DIR     ?= $(ZP_INSTALL_DIR)/lib
ZP_INCLUDE_DIR ?= $(ZP_INSTALL_DIR)/include
ZP_TOUCH_DIR   ?= $(ZP_INSTALL_DIR)/touchfiles

COSIM_DIR             ?= $(ZP_DIR)/cosim
COSIM_MK_DIR          ?= $(COSIM_DIR)/mk
COSIM_VSRC_DIR        ?= $(COSIM_DIR)/v
COSIM_CSRC_DIR        ?= $(COSIM_DIR)/src
COSIM_INCLUDE_DIR     ?= $(COSIM_DIR)/include
COSIM_PY_DIR          ?= $(COSIM_DIR)/py
COSIM_TCL_DIR         ?= $(COSIM_DIR)/tcl
COSIM_XDC_DIR         ?= $(COSIM_DIR)/xdc
COSIM_INSTALL_DIR     ?= $(COSIM_DIR)/install
COSIM_WORK_DIR        ?= $(COSIM_INSTALL_DIR)/work

SOFTWARE_DIR          ?= $(ZP_DIR)/software
SOFTWARE_MK_DIR       ?= $(SOFTWARE_DIR)/mk
SOFTWARE_VSRC_DIR     ?= $(SOFTWARE_DIR)/v
SOFTWARE_CSRC_DIR     ?= $(SOFTWARE_DIR)/src
SOFTWARE_INCLUDE_DIR  ?= $(SOFTWARE_DIR)/include
SOFTWARE_PY_DIR       ?= $(SOFTWARE_DIR)/py
SOFTWARE_TCL_DIR      ?= $(SOFTWARE_DIR)/tcl
SOFTWARE_XDC_DIR      ?= $(SOFTWARE_DIR)/xdc
SOFTWARE_INSTALL_DIR  ?= $(SOFTWARE_DIR)/install
SOFTWARE_WORK_DIR     ?= $(SOFTWARE_INSTALL_DIR)/work

ZP_BP_RTL_DIR        ?= $(ZP_IMPORT_DIR)/black-parrot
ZP_BP_SDK_DIR        ?= $(ZP_IMPORT_DIR)/black-parrot-sdk
ZP_BP_SUB_DIR        ?= $(ZP_IMPORT_DIR)/black-parrot-subsystems
ZP_BP_TOOLS_DIR      ?= $(ZP_IMPORT_DIR)/black-parrot-tools
ZP_BSG_REPLICANT_DIR ?= $(ZP_IMPORT_DIR)/bsg_replicant
ZP_BSG_MANYCORE_DIR  ?= $(ZP_IMPORT_DIR)/bsg_manycore
ZP_BASEJUMP_STL_DIR  ?= $(BLACKPARROT_DIR)/external/basejump_stl

BSG_CADENV_DIR ?= $(ZP_IMPORT_DIR)/bsg_cadenv

# Exported for historical reasons, remove later
export BP_SDK_DIR := $(ZP_BP_SDK_DIR)

