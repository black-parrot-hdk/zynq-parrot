
#############################
# Environment Settings
#############################
# TCL to pause between stages, batch to proceed straight through
VIVADO_MODE        ?= batch
# These are set by bsg_cadenv but can be overridden
VIVADO_PATH        ?= /tools/Xilinx/Vivado
# current supported 2019.1 and 2022.1
VIVADO_VERSION     ?= 2022.1
# Path to specific Vivado install
XILINX_VIVADO      ?= $(VIVADO_PATH)/$(VIVADO_VERSION)
# update this with a pointer to your vivado install
VIVADO_SETTINGS    ?= $(XILINX_VIVADO)/settings64.sh
# Path to specific PetaLinux install
PETALINUX_PATH     ?= /tools/Xilinx/PetaLinux
# current supported 2019.1 and 2022.1
PETALINUX_VERSION  ?= 2022.1
# Path to specific Vivado install
XILINX_PETALINUX   ?= $(PETALINUX_PATH)/$(PETALINUX_VERSION)
# update this with a pointer to your vivado install
PETALINUX_SETTINGS ?= $(XILINX_PETALINUX)/settings.sh

#############################
# Environment Commands
#############################
VIVADO_RUN    ?= source $(VIVADO_SETTINGS) && $(VIVADO) -mode $(VIVADO_MODE)
PETALINUX_RUN ?= source $(PETALINUX_SETTINGS) && $(PETALINUX)

#############################
# Makefile functions
#############################
define upper
$(shell echo $(1) | tr a-z A-Z)
endef
define lower
$(shell echo $(1) | tr A-Z a-z)
endef

#############################
# PS Targets
#############################
PYNQZ2_SDK      ?= $(SOFTWARE_INSTALL_DIR)/pynqz2
PYNQZ2_CC       ?= arm-xilinx-linux-gnueabi
PYNQZ2_TEMPLATE ?= zynq
PYNQZ2_PROJ     ?= pynqz2_proj
PYNQZ2_TCL      ?= $(SOFTWARE_TCL_DIR)/vivado-gen-xsa-pynqz2.tcl

ULTRA96V2_SDK      ?= $(SOFTWARE_INSTALL_DIR)/ultra96v2
ULTRA96V2_CC       ?= aarch64-xilinx-linux-gnueabi
ULTRA96V2_TEMPLATE ?= zynqMP
ULTRA96V2_PROJ     ?= ultra96v2_proj
ULTRA96V2_TCL      ?= $(SOFTWARE_TCL_DIR)/vivado-gen-xsa-ultra96v2.tcl

#############################
# Host Targets
#############################
ifneq (,$(findstring centos,$(shell python -m platform)))
HOST_CC ?= x86_64-redhat-linux
else ifneq (,$(findstring generic,$(shell python -m platform)))
HOST_CC ?= x86_64-linux-gnu
else
$(error Unknown x86 host!)
endif

X86_SDK      ?= $(SOFTWARE_INSTALL_DIR)/x86
X86_CC       ?= $(HOST_CC)
X86_TEMPLATE ?= UNUSED
X86_PROJ     ?= UNUSED
X86_TCL      ?= UNUSED

#############################
# Target variables
#############################
TARGET_NAME ?= x86

TARGET_SDK ?= $(SOFTWARE_INSTALL_DIR)/$(TARGET_NAME)
TARGET_WORK ?= $(TARGET_SDK)/work
TARGET_ENV ?= $(TARGET_SDK)/environment-setup-$(TARGET_NAME)

TARGET_RISCV64 ?= $(TARGET_SDK)/bin/riscv64-unknown-elf-dramfs-gcc
TARGET_RISCV32 ?= $(TARGET_SDK)/bin/riscv32-unknown-elf-dramfs-gcc
TARGET_VERILATOR ?= $(TARGET_SDK)/bin/verilator
TARGET_OPENOCD ?= $(TARGET_SDK)/bin/openocd
TARGET_DROMAJO ?= $(TARGET_SDK)/bin/dromajo
TARGET_PYNQ ?= $(TARGET_SDK)/lib/libpynq.a
TARGET_CC ?= $($(call upper,$(TARGET_NAME)_CC))

TARGET_DIRS := $(TARGET_SDK)/bin $(TARGET_SDK)/lib $(TARGET_SDK)/include
$(TARGET_DIRS):
	$(MKDIR) $@

-include $(X86_SDK)/bsg_cadenv/cadenv.mk
ifeq ($(TARGET_NAME),x86)

$(X86_SDK)/lib/libpynq.a: | $(TARGET_ENV)
	$(MKDIR) $(@D)
	touch $@

%/cadenv.mk:
	# BSG users leverage a machine-specific cadenv
	#   Here, we add sourcing to get these variables as well
	$(eval CADENV_URL := git@github.com:bespoke-silicon-group/bsg_cadenv)
	if [[ ! -z $$(git ls-remote --exit-code $(CADENV_URL) HEAD 2> /dev/null) ]]; then \
		$(ECHO) "bsg_cadenv found"; \
		$(GCLONE) $(CADENV_URL) $(@D); \
	else \
		$(ECHO) "bsg_cadenv not found"; \
		$(MKDIR) $(@D); \
		$(TOUCH) $@; \
	fi
    # Recursive make to include the new fragment
	$(MAKE) $(TARGET_ENV)

$(X86_SDK)/environment-setup-%: | $(TARGET_DIRS)
	@$(eval reg_vars := $(filter-out .%,$(sort $(.VARIABLES))))
	@$(eval env_vars := $(foreach V, $(reg_vars), \
		$(if $(filter file, $(origin $V)), \
			'$V="$($V)"')))
	$(MKDIR) $(@D)
	for e in ${env_vars}; do \
		$(ECHO) "$$e" >> $@; \
	done
	$(SED_I) "/CURDIR/d" $@
	$(SED_I) "/CURR_/d" $@
	$(SED_I) "/MAKE/d" $@
	$(SED_I) "/PART/d" $@
endif

#############################
# Executable shortcuts
#############################
export AUTORECONF ?= autoreconf
export MKDIR ?= mkdir -p
export ENV_SETUP ?= source $(TARGET_ENV)
export GCLONE ?= git clone --recurse-submodules
export SED_I ?= sed -i
export CP ?= cp
export CD ?= cd
export MV ?= mv
export CMAKE ?= $(if $(shell which cmake3),cmake3,cmake)
export PYTHON ?= $(if $(shell which python3),python3,python)
export FINDHERE ?= find .
export ECHO ?= echo
export RMRF ?= rm -rf
export TOUCH ?= touch
export AWK ?= awk
export EGREP ?= egrep

