
##########################################################
## user configuration
##########################################################
# boards: ultra96v2, pynqz2, vu47p
# hosts : zynq, bridge
BOARDNAME ?= pynqz2
ifeq ($(BOARDNAME),ultra96v2)
PART ?= xczu3eg-sbva484-1-e
HOST ?= zynq
else ifeq ($(BOARDNAME),pynqz2)
PART ?= xc7z020clg400-1
HOST ?= zynq
else ifeq ($(BOARDNAME),vu47p)
PART ?= xcvu47p-fsvh2892-3-e
HOST ?= bridge
else
$(error Invalid BOARDNAME)
endif

UART_BAUD ?= 921600

##############################
# Project-specific configuration
##############################

ZP_DIR         ?= $(TOP)
ZP_WORK_DIR    ?= $(ZP_DIR)/work
ZP_INSTALL_DIR ?= $(ZP_DIR)/install
ZP_RISCV_DIR   ?= $(ZP_DIR)/riscv

ZP_BIN_DIR     = $(ZP_INSTALL_DIR)/bin
ZP_LIB_DIR     = $(ZP_INSTALL_DIR)/lib
ZP_INCLUDE_DIR = $(ZP_INSTALL_DIR)/include
ZP_TOUCH_DIR   = $(ZP_INSTALL_DIR)/touchfiles

COSIM_DIR             = $(ZP_DIR)/cosim
COSIM_MK_DIR          = $(COSIM_DIR)/mk
COSIM_VSRC_DIR        = $(COSIM_DIR)/v
COSIM_CSRC_DIR        = $(COSIM_DIR)/src
COSIM_INCLUDE_DIR     = $(COSIM_DIR)/include
COSIM_PY_DIR          = $(COSIM_DIR)/py
COSIM_TCL_DIR         = $(COSIM_DIR)/tcl
COSIM_XDC_DIR         = $(COSIM_DIR)/xdc

SOFTWARE_DIR          = $(ZP_DIR)/software
SOFTWARE_MK_DIR       = $(SOFTWARE_DIR)/mk
SOFTWARE_VSRC_DIR     = $(SOFTWARE_DIR)/v
SOFTWARE_CSRC_DIR     = $(SOFTWARE_DIR)/src
SOFTWARE_INCLUDE_DIR  = $(SOFTWARE_DIR)/include
SOFTWARE_PY_DIR       = $(SOFTWARE_DIR)/py
SOFTWARE_TCL_DIR      = $(SOFTWARE_DIR)/tcl
SOFTWARE_XDC_DIR      = $(SOFTWARE_DIR)/xdc

ZP_IMPORT_DIR   = $(ZP_DIR)/import
ZP_COSIM_DIR    = $(ZP_DIR)/cosim
ZP_SOFTWARE_DIR = $(ZP_DIR)/software

BP_RTL_DIR        = $(ZP_IMPORT_DIR)/black-parrot
BP_SDK_DIR        = $(ZP_IMPORT_DIR)/black-parrot-sdk
BP_TOOLS_DIR      = $(ZP_IMPORT_DIR)/black-parrot-tools
BP_SUB_DIR        = $(ZP_IMPORT_DIR)/black-parrot-subsystems
BSG_MANYCORE_DIR  = $(ZP_IMPORT_DIR)/bsg_manycore
BSG_REPLICANT_DIR = $(ZP_IMPORT_DIR)/bsg_replicant
BASEJUMP_STL_DIR  = $(ZP_IMPORT_DIR)/basejump_stl
HARDFLOAT_DIR     = $(ZP_IMPORT_DIR)/HardFloat
export PATH := $(ZP_BIN_DIR):$(PATH)

#############################
# Executable shortcuts
#############################
AWK        ?= awk
AUTORECONF ?= autoreconf
AUTOCONF   ?= autoconf
BASE64     ?= base64
CAT        ?= cat
CD         ?= cd
CMAKE      ?= $(if $(shell which cmake3),cmake3,cmake)
CP         ?= cp
ECHO       ?= echo
EGREP      ?= egrep
ENV_SETUP  ?= source $(TARGET_ENV)
FINDHERE   ?= find .
GCC        ?= gcc
GXX        ?= g++
GIT        ?= git
GCLONE     ?= git clone --recurse-submodules
GTKWAVE    ?= gtkwave
GREP       ?= grep
MKDIR      ?= mkdir -p
MKEXE      ?= chmod +x
MV         ?= mv
PETALINUX  ?= petalinux
PYTHON     ?= $(if $(shell which python3),$(PYTHON3),$(PYTHON2))
PYTHON2    ?= PYTHONPATH=$(COSIM_PY_DIR) python2
PYTHON3    ?= PYTHONPATH=$(COSIM_PY_DIR) python3
RMRF       ?= rm -rf
SED        ?= sed
SED_I      ?= sed -i
SIMVISION  ?= simvision
SUDO       ?= sudo
SYMLINK    ?= ln -nsf
TAR        ?= tar
TEE        ?= tee
TEE_I      ?= tee -i
TOUCH      ?= touch
TR         ?= tr
VCS        ?= vcs
VERDI      ?= verdi
VERILATOR  ?= verilator
VIVADO     ?= vivado
WGET       ?= wget
XMSIM      ?= xmsim
XRUN       ?= xrun
XXD        ?= xxd
_DVE       ?= dve

ASCII_TO_ROM_PY ?= $(BASEJUMP_STL_DIR)/bsg_mem/bsg_ascii_to_rom.py
RISCV_OBJCOPY ?= riscv64-unknown-elf-objcopy
RISCV_OBJDUMP ?= riscv64-unknown-elf-objdump

# TCL to pause between stages, batch to proceed straight through
VIVADO_MODE     ?= tcl
# These are set by bsg_cadenv but can be overridden
VIVADO_PATH     ?= /tools/Xilinx/Vivado
# Currently supports 2019.1 and 2022.1
VIVADO_VERSION  ?= 2022.1
# Path to specific Vivado install
XILINX_VIVADO   ?= $(VIVADO_PATH)/$(VIVADO_VERSION)
# Update this with a pointer to your vivado install
VIVADO_SETTINGS ?= $(XILINX_VIVADO)/settings64.sh
# Path to specific PetaLinux install
PETALINUX_PATH     ?= /tools/Xilinx/PetaLinux
# Currently supports 2019.1 and 2022.1
PETALINUX_VERSION  ?= 2022.1
# Path to specific PetaLinux install
XILINX_PETALINUX   ?= $(PETALINUX_PATH)/$(PETALINUX_VERSION)
# Update this with a pointer to your vivado install
PETALINUX_SETTINGS ?= $(XILINX_PETALINUX)/settings.sh

# Command as variable
VIVADO_RUN    ?= source $(VIVADO_SETTINGS) && $(VIVADO) -mode $(VIVADO_MODE)
PETALINUX_RUN ?= source $(PETALINUX_SETTINGS) && $(PETALINUX)

#############################
# Common targets
#############################
clean:: ## cleans the working directory
clean::
	@$(RMRF) obj_dir
	@$(RMRF) trace.fst
	@$(RMRF) *.log
	@$(RMRF) *.trace
	@$(RMRF) *.riscv
	@$(RMRF) *.dump
	@$(RMRF) csrc
	@$(RMRF) ucli.key
	@$(RMRF) vc_hdrs.h
	@$(RMRF) simv
	@$(RMRF) simv.daidir
	@$(RMRF) vcdplus.vpd
	@$(RMRF) *.nbf
	@$(RMRF) *.elf
	@$(RMRF) *.trace
	@$(RMRF) *.jou
	@$(RMRF) *.b64
	@$(RMRF) xsim.dir
	@$(RMRF) flist.vcs
	@$(RMRF) flist.*.vcs
	@$(RMRF) xcelium.d
	@$(RMRF) *.history
	@$(RMRF) *.trace
	@$(RMRF) *_bd_1.bit
	@$(RMRF) *_bd_1.hwh
	@$(RMRF) *_bd_1.tcl
	@$(RMRF) *_bd_1.map
	@$(RMRF) ip_repo
	@$(RMRF) *_ip_proj.*
	@$(RMRF) *_bd_proj.*
	@$(RMRF) NA/ .Xil/
	@$(RMRF) control-program
	@$(RMRF) *.so  *.so.daidir
	@$(RMRF) $(DESIGN_DIR)/*.o
	@$(RMRF) $(COSIM_CSRC_DIR)/*.o
ifneq (,$(BUILD_COLLATERAL))
	@$(RMRF) $(BUILD_COLLATERAL)
endif
ifneq (,$(RUN_COLLATERAL))
	@$(RMRF) $(RUN_COLLATERAL)
endif

#############################
# Hooks
#############################

## Probably don't need to change, but here's the hook anyway
HOOK_REPO_NAME = zynq-parrot
## All local directories to create during checkout
HOOK_CHECKOUT_DIRS = \
        $(ZP_WORK_DIR) \
        $(ZP_INSTALL_DIR) \
        $(ZP_RISCV_DIR)
## Long checkouts to disable
HOOK_DISABLE_SUBMODULES =

