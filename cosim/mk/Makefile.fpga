
include $(TOP)/cosim/mk/Makefile.common

MODE ?= tcl

# update this with a pointer to your vivado install
#XILINX_ENV=source /tools/Xilinx/Vivado/2019.1/settings64.sh
XILINX_ENV=source /gro/cad/Xilinx/Vivado/2019.1/settings64.sh

CFLAGS += -O2
CFLAGS += -lcma -lpthread
CFLAGS += $(SIM_DEFINES)

CINCLUDES += -I$(COSIM_INCLUDE_DIR)/fpga

all:
	@echo "## See the makefile for the fun things you can do in this directory"

EXE ?= runme
run: $(EXE)
	sudo $< $(SIM_ARGS)

$(EXE): $(HOST_PROGRAM)
	$(GCC) $(CFLAGS) $(CINCLUDES) $(CSOURCES) $< -o $@

fpga_report_build_block:
	-@grep --color "CRITICAL WARNING" vivado.log
	-@grep --color "ERROR" vivado.log
	-@tail -n5 vivado.log
	-@grep --color "ERROR" `find . -iname "*.log"`
	-@grep -m 1 -A 3 WNS $(BASENAME)_bd_proj.runs/impl_1/$(BASENAME)_bd_1_wrapper_timing_summary_routed.rpt
	-@echo "## See $(BASENAME)_bd_proj.runs/impl_1/$(BASENAME)_bd_1_wrapper_timing_summary_routed.rpt for timing report."

# this packages the IP, but does not continue to synthesis, pnr and bitfile generation
# on the x86 server
fpga_build_ip: clean_fpga_build $(FLIST)
	mkdir fpga_build
	$(XILINX_ENV) && vivado -source $(COSIM_TCL_DIR)/vivado-build-ip.tcl -mode $(MODE)
	-@grep --color "CRITICAL WARNING" vivado.log
	-@grep --color "ERROR" vivado.log
	-@tail -n5 vivado.log

fpga_build: fpga_build_ip
	$(VIVADO) -source $(CURR)/vivado-create-block.tcl -mode $(MODE)
	$(MAKE) fpga_report_build_block

pack_bitstream:
	cp $(BASENAME)_bd_proj.srcs/sources_1/bd/$(BASENAME)_bd_1/hw_handoff/$(BASENAME)_bd_1* .
	cp $(BASENAME)_bd_proj.runs/impl_1/$(BASENAME)_bd_1_wrapper.bit $(BASENAME)_bd_1.bit
	tar -Jc $(BASENAME)_bd_1* | base64 > $(BASENAME)_bd_1.tar.xz.b64

unpack_bitstream:
	base64 -d $(BASENAME)_bd_1.tar.xz.b64 | tar xvJ

# load the bitstream on the Zynq board (copy the .b64 file into this dir first)
# make sure to unpack it first

load_bitstream: control-program
	echo 'import pprint; from pynq import Overlay; overlay=Overlay("$(BASENAME)_bd_1.bit"); print (overlay.__doc__); pprint.pprint(overlay.ip_dict,width=1); pprint.pprint(overlay.clock_dict,width=1);' | sudo python3
	@echo 'allocating memory and sleeping...'
	sudo ./control-program &

# use this instead if you have already loaded the bitstream this will load the bitstream, but transfer
# over the physical memory pointer that was written into the accelerator before
# this way we do not need to reallocate dram
# on the zynq board

reload_bitstream_keep_dram:
	echo 'import pprint; from pynq import Overlay, MMIO; mmio=MMIO(0x40000000,0x1000); val4 = mmio.read(0x4); val8 = mmio.read(0x8);  overlay=Overlay("$(BASENAME)_bd_1.bit"); print("transferring over: ", hex(val4), hex(val8)); mmio.write(0x4,val4); mmio.write(0x8,val8);  print (overlay.__doc__); pprint.pprint(overlay.ip_dict,width=1); pprint.pprint(overlay.clock_dict,width=1)' | sudo python3

print_clocks:
	echo 'from pynq import Clocks; print("PL Clock: ",Clocks.fclk0_mhz,"MHz"); print("PS Clock: ",Clocks.cpu_mhz,"MHz");' | sudo python3

%.set_clock:
	echo 'from pynq import Clocks;  Clocks.fclk0_mhz = $*; print("PL Clock Set To:: ",Clocks.fclk0_mhz,"MHz"); ' | sudo python3

clean_fpga_build:
	rm -rf flist.vcs
	rm -rf *.fpga
	rm -rf *.log
	rm -rf *.jou
	rm -rf *.b64
	rm -rf $(BASENAME)_ip_proj*
	rm -rf fpga_build
	rm -rf $(BASENAME)_bd_proj*
	rm -rf $(BASENAME)_bd_1.bit $(BASENAME)_bd_1.hwh $(BASENAME)_bd_1_bd.tcl

clean: clean_fpga_build
	rm -rf $(EXE)
	rm -rf sds_trace_data.dat
	rm -rf control-program

