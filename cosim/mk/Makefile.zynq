
include $(COSIM_MK_DIR)/Makefile.env

ifeq ($(shell /usr/bin/arch),armv7l)
else ifeq ($(shell /usr/bin/arch),aarch64)
else
$(error ZYNQ code should be run on the PS, not x86)
endif

CFLAGS += -DZYNQ
CFLAGS += -DHOST_$(call upper,$(HOST))
CFLAGS += $(addprefix -D,$(DEFINES))
CFLAGS += -O2
CFLAGS += -lcma -lpthread
CFLAGS += -std=c++14
CFLAGS += $(shell cat $(BASENAME)_bd_1.map)
CFLAGS += -DGP2_ADDR_BASE=0 -DHP1_ADDR_BASE=0

CINCLUDES += -I$(COSIM_INCLUDE_DIR)/common
CINCLUDES += -I$(COSIM_INCLUDE_DIR)/zynq
CINCLUDES += -I$(CURR_DESIGN_DIR)

CSOURCES += $(MAIN_PROGRAM)

BUILD_COLLATERAL += $(BASENAME)_bd_1.map

all:
	@echo "Rules for ZYNQ; see $(TOP)/cosim/mk/Makefile.zynq for more:"
	@grep -o -e "^[a-Z_%\.]*:" $(TOP)/cosim/mk/Makefile.zynq

EXE ?= control-program
run: $(EXE) $(RUN_COLLATERAL)
	sudo ./$< $(SIM_ARGS) | tee run.log

$(EXE): $(HOST_PROGRAM) $(BASENAME)_bd_1.map
	$(GCC) $(CFLAGS) $(LDFLAGS) $(CINCLUDES) $(CSOURCES) $< $(CFLAGS) $(LDFLAGS) -o $@ | tee build.log

unpack_bitstream: $(BASENAME)_bd_1.bit
$(BASENAME)_bd_1.bit $(BASENAME)_bd_1.map:
	$(BASE64) -d ../$(BASENAME)_bd_1.$(HOST).$(BOARDNAME).tar.xz.b64 | $(TAR) xvJ

reset_pl:
	echo 'from pynq import PL; PL.reset();' | sudo -E $(PYTHON3)

# load the bitstream on the Zynq board (copy the .b64 file into this dir first)
# make sure to unpack it first
load_bitstream: reset_pl
	echo 'import pprint; from pynq import Overlay; overlay=Overlay("$(BASENAME)_bd_1.bit"); print (overlay.__doc__); pprint.pprint(overlay.ip_dict,width=1); pprint.pprint(overlay.clock_dict,width=1);' | sudo -E $(PYTHON3)

# use this instead if you have already loaded the bitstream this will load the bitstream, but transfer
# over the physical memory pointer that was written into the accelerator before
# this way we do not need to reallocate dram on the zynq board
# note: this rule is only currently necessary and only works with blackparrot, but with standardization
# of addresses could apply to other DRAM-using accelerators
reload_bitstream_keep_dram:
	echo 'import pprint; from pynq import Overlay, MMIO; mmio=MMIO(0x40000000,0x1000); val4 = mmio.read(0x4); val8 = mmio.read(0x8);  overlay=Overlay("$(BASENAME)_bd_1.bit"); print("transferring over: ", hex(val4), hex(val8)); mmio.write(0x4,val4); mmio.write(0x8,val8);  print (overlay.__doc__); pprint.pprint(overlay.ip_dict,width=1); pprint.pprint(overlay.clock_dict,width=1)' | sudo -E $(PYTHON3)

print_clocks:
	echo 'from pynq import Clocks; print("PL Clock: ",Clocks.fclk0_mhz,"MHz"); print("PS Clock: ",Clocks.cpu_mhz,"MHz");' | sudo -E $(PYTHON3)

%.set_clock:
	echo 'from pynq import Clocks;  Clocks.fclk0_mhz = $*; print("PL Clock Set To:: ",Clocks.fclk0_mhz,"MHz"); ' | sudo -E $(PYTHON3)

clean:
	rm -rf $(SIM_COLLATERAL)
	rm -rf $(EXE)
	rm -rf sds_trace_data.dat
	rm -rf *.nbf
	rm -rf *.elf
	rm -rf $(BASENAME)_bd_1.bit $(BASENAME)_bd_1.hwh $(BASENAME)_bd_1_bd.tcl

