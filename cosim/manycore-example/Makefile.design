TOP ?= $(shell git rev-parse --show-toplevel)
include $(TOP)/Makefile.common
include $(TOP)/Makefile.env

include $(COSIM_MK_DIR)/Makefile.common
include $(COSIM_MK_DIR)/Makefile.env
include $(DESIGN_DIR)/Makefile.hardware

#############################
# Design Settings
#############################
TB_MODULE  ?= bsg_nonsynth_zynq_testbench
BASENAME   ?= manycore

MAIN_PROGRAM ?= $(COSIM_CSRC_DIR)/main.cpp
HOST_PROGRAM ?= $(DESIGN_DIR)/ps.cpp

RUN_ARGS += +c_args=$(NBF_FILE)

#############################
# Design Defines
#############################
DEFINES += GP0_ENABLE=1
DEFINES += GP0_ADDR_WIDTH=10 GP0_DATA_WIDTH=32
DEFINES += HP0_ENABLE=1
DEFINES += HP0_DATA_WIDTH=64 HP0_ADDR_WIDTH=32
DEFINES += ACLK_MHZ=55
DEFINES += RTCLK_MHZ=8
#DEFINES += VERIFY_NBF
DEFINES += NUM_FINISH=1

#############################
# Build Collateral
#############################
BSG_MACHINE_PATH ?= $(BSG_REPLICANT_DIR)/machines/pod_X1Y1_mesh_X2Y2_hbm_one_pseudo_channel
%/bsg_bladerunner_pkg.sv:
	BSG_MACHINE_PATH=$(BSG_MACHINE_PATH) \
	BSG_F1_DIR=$(BSG_REPLICANT_DIR) \
		$(MAKE) -C $(BSG_REPLICANT_DIR)/hardware $(BSG_MACHINE_PATH)/$(@F)
	@$(MV) $(BSG_MACHINE_PATH)/$(@F) $@

%/bsg_bladerunner_configuration.sv:
	@$(eval ASCII_TO_ROM_PY := $(BASEJUMP_STL_DIR)/bsg_mem/bsg_ascii_to_rom.py)
	@$(eval ROM_NAME := $(subst .sv,.rom,$(@F)))
	BSG_MACHINE_PATH=$(BSG_MACHINE_PATH) \
	BSG_F1_DIR=$(BSG_REPLICANT_DIR) \
		$(MAKE) -C $(BSG_REPLICANT_DIR)/hardware $(BSG_MACHINE_PATH)/$(ROM_NAME)
	@$(PYTHON2) $(ASCII_TO_ROM_PY) $(BSG_MACHINE_PATH)/$(ROM_NAME) bsg_bladerunner_configuration > $@
	@$(SED) -i "/parameter int bsg_machine_hetero_type_vec_gp/d" $@

%/bsg_manycore_machine.h:
	BSG_MACHINE_PATH=$(BSG_MACHINE_PATH) \
	BSG_F1_DIR=$(BSG_REPLICANT_DIR) \
		$(MAKE) -C $(BSG_REPLICANT_DIR)/hardware $(BSG_MACHINE_PATH)/$(@F)
	@$(CP) $(BSG_MACHINE_PATH)/$(@F) $@

BUILD_COLLATERAL += $(DESIGN_VSRC_DIR)/bsg_bladerunner_pkg.sv
BUILD_COLLATERAL += $(DESIGN_VSRC_DIR)/bsg_bladerunner_configuration.sv
BUILD_COLLATERAL += $(DESIGN_DIR)/bsg_manycore_machine.h

#############################
# Run Collateral
#############################
%.riscv32:
	BSG_MACHINE_PATH=$(BSG_MACHINE_PATH) \
		$(MAKE) -C $(BSG_MANYCORE_SOFTWARE_DIR)/spmd/$* clean main.riscv
	@$(MV) $(BSG_MANYCORE_SOFTWARE_DIR)/spmd/$*/main.riscv $@

# Vary per program
bsg_tiles_org_X            ?= 0
bsg_tiles_org_Y            ?= 0
bsg_tiles_X                ?= 1
bsg_tiles_Y                ?= 1
bsg_pods_X                 ?= 1
bsg_pods_Y                 ?= 1
bsg_elf_off_chip_mem       ?= 1
skip_dram_instruction_load ?= 0
skip_zeros                 ?= 1
ipoly_hashing              ?= 0

NBF_SCRIPT ?= $(BSG_MANYCORE_DIR)/software/py/nbf.py
%.nbf: %.riscv32
	$(eval include $(BSG_MACHINE_PATH)/Makefile.machine.include)
	$(eval export RISCV_BIN_DIR=$(BSG_MANYCORE_SOFTWARE_DIR)/riscv-tools/riscv-install/bin)
	@$(PYTHON2) $(NBF_SCRIPT) \
		$< \
		$(BSG_MACHINE_GLOBAL_X) $(BSG_MACHINE_GLOBAL_Y) \
		$(BSG_MACHINE_VCACHE_WAY) $(BSG_MACHINE_VCACHE_SET) \
		$(BSG_MACHINE_VCACHE_BLOCK_SIZE_WORDS) \
		$(__BSG_MACHINE_DRAMSIM3_CHIP_SIZE_IN_WORDS) $(BSG_MACHINE_MAX_EPA_WIDTH) \
		$(bsg_tiles_org_X) $(bsg_tiles_org_Y) \
		$(bsg_tiles_X) $(bsg_tiles_Y) $(bsg_elf_off_chip_mem) \
		$(BSG_MACHINE_ORIGIN_COORD_X) $(BSG_MACHINE_ORIGIN_COORD_Y) \
		$(BSG_MACHINE_PODS_X) $(BSG_MACHINE_PODS_Y) \
		$(bsg_pods_X) $(bsg_pods_Y) \
		$(skip_dram_instruction_load) \
		$(skip_zeros) \
		$(ipoly_hashing) \
		  > $@
	@$(RMRF) main_dram.mem main_dmem.mem

PROG ?= hello
NBF_FILE ?= $(addsuffix .nbf,$(PROG))

RUN_COLLATERAL = $(NBF_FILE)

include $(COSIM_MK_DIR)/Makefile.$(TOOL)

